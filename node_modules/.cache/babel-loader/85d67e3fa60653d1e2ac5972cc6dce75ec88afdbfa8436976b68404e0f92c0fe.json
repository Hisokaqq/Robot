{"ast":null,"code":"var _jsxFileName = \"/Users/oleksandrburtyn/Desktop/Projects/3drobot/src/components/Robot.jsx\",\n  _s = $RefreshSig$();\n/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.2.2 scene.gltf --transform\nAuthor: efforya (https://sketchfab.com/efforya)\nLicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nSource: https://sketchfab.com/3d-models/medical-android-c856a602428944a98f222c83658222a4\nTitle: Medical Android\n*/\n\nimport React, { useLayoutEffect, useRef } from 'react';\nimport { useGLTF, useScroll } from '@react-three/drei';\nimport { gsap } from 'gsap';\nimport { useFrame } from '@react-three/fiber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Robot = props => {\n  _s();\n  const {\n    nodes,\n    materials\n  } = useGLTF('./models/robot/robot/scene-transformed.glb');\n  const robotRef = useRef();\n  const scroll = useScroll();\n  const tl = useRef();\n  useFrame((state, delta) => {\n    tl.current.seek(scroll.offset * tl.current.duration());\n    tl.current.to(robot.current.rotation, {\n      y: -1\n    }, 2).to(robot.current.position, {\n      x: 1\n    }, 2).to(robot.current.rotation, {\n      y: 1\n    }, 6).to(robot.current.position, {\n      x: -1\n    }, 6).to(robot.current.rotation, {\n      y: 0\n    }, 11).to(robot.current.rotation, {\n      x: 1\n    }, 11).to(robot.current.position, {\n      x: 0\n    }, 11).to(robot.current.rotation, {\n      y: 0\n    }, 13).to(robot.current.rotation, {\n      x: -1\n    }, 13).to(robot.current.position, {\n      x: 0\n    }, 13).to(robot.current.rotation, {\n      y: 0\n    }, 16).to(robot.current.rotation, {\n      x: 0\n    }, 16).to(robot.current.position, {\n      x: 0\n    }, 16).to(robot.current.rotation, {\n      y: 0\n    }, 20).to(robot.current.rotation, {\n      x: 0\n    }, 20).to(robot.current.position, {\n      x: 0\n    }, 20);\n  }, []);\n  useLayoutEffect(() => {\n    tl.current = gsap.timeline({\n      defaults: {\n        duration: 2,\n        ease: 'power1.inOut'\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    dispose: null,\n    ref: robotRef,\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      geometry: nodes.Object_4.geometry,\n      material: materials['medbot.003'],\n      rotation: [0, Math.PI * 3 / 2, 0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Robot, \"Lto82iPHY+DxM0+mVG1+Y9XHeu8=\", false, function () {\n  return [useGLTF, useScroll, useFrame];\n});\n_c = Robot;\nexport default Robot;\nuseGLTF.preload('./models/robot/robot/scene-transformed.glb');\nvar _c;\n$RefreshReg$(_c, \"Robot\");","map":{"version":3,"names":["React","useLayoutEffect","useRef","useGLTF","useScroll","gsap","useFrame","jsxDEV","_jsxDEV","Robot","props","_s","nodes","materials","robotRef","scroll","tl","state","delta","current","seek","offset","duration","to","robot","rotation","y","position","x","timeline","defaults","ease","dispose","ref","children","geometry","Object_4","material","Math","PI","fileName","_jsxFileName","lineNumber","columnNumber","_c","preload","$RefreshReg$"],"sources":["/Users/oleksandrburtyn/Desktop/Projects/3drobot/src/components/Robot.jsx"],"sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nCommand: npx gltfjsx@6.2.2 scene.gltf --transform\nAuthor: efforya (https://sketchfab.com/efforya)\nLicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nSource: https://sketchfab.com/3d-models/medical-android-c856a602428944a98f222c83658222a4\nTitle: Medical Android\n*/\n\nimport React, { useLayoutEffect, useRef } from 'react'\nimport { useGLTF, useScroll } from '@react-three/drei'\nimport { gsap } from 'gsap'\nimport { useFrame } from '@react-three/fiber'\nconst Robot = (props) => {\n  const { nodes, materials } = useGLTF('./models/robot/robot/scene-transformed.glb')\n  const robotRef = useRef()\n  const scroll = useScroll()\n  const tl = useRef()\n\n  useFrame((state, delta) => {\n    tl.current.seek(scroll.offset * tl.current.duration())\n    tl.current\n    .to(robot.current.rotation, {y: -1}, 2)\n    .to(robot.current.position, {x: 1}, 2)\n\n    .to(robot.current.rotation, {y: 1}, 6)   \n    .to(robot.current.position, {x: -1}, 6)\n\n    .to(robot.current.rotation, {y: 0}, 11)\n    .to(robot.current.rotation, {x: 1}, 11)\n    .to(robot.current.position, {x: 0}, 11)\n\n    .to(robot.current.rotation, {y: 0}, 13)\n    .to(robot.current.rotation, {x: -1}, 13)    \n    .to(robot.current.position, {x: 0}, 13)\n\n    .to(robot.current.rotation, {y: 0}, 16)   \n    .to(robot.current.rotation, {x: 0}, 16) \n    .to(robot.current.position, {x: 0}, 16)    \n\n    .to(robot.current.rotation, {y: 0}, 20)   \n    .to(robot.current.rotation, {x: 0}, 20) \n    .to(robot.current.position, {x: 0}, 20)   \n\n  },[])\n\n  useLayoutEffect(() => {\n    tl.current = gsap.timeline({ defaults: {duration: 2, ease: 'power1.inOut'} })\n  })\n  return (\n    <group {...props} dispose={null} ref={robotRef}>\n      <mesh geometry={nodes.Object_4.geometry} material={materials['medbot.003']} rotation={[0, Math.PI*3/2, 0]}>\n     \n      </mesh>\n    </group>\n  )\n}\n\nexport default Robot\nuseGLTF.preload('./models/robot/robot/scene-transformed.glb')\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}